{"version":3,"sources":["Hooks/useReducerFetch.tsx","components/TopFree.tsx","components/TopGrossing.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["reducer","state","action","type","apps","results","isLoading","useReducerFetch","category","amount","useReducer","dispatch","fetchApps","a","url","fetch","res","json","data","feed","useEffect","Horizontal","styled","div","FreeAppImg","img","FreeApp","FreeAppName","FreeAppGenres","TopFree","useState","setAmount","observer","IntersectionObserver","entries","forEach","entry","intersectionRatio","currentAmount","target","document","querySelector","observe","unobserve","className","map","app","i","key","name","genres","src","artworkUrl100","alt","id","style","padding","Vertical","GrossingApp","GrossingAppImg","GrossingAppName","GrossingAppGenres","TopGrossing","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9eae0b45.chunk.js","sourcesContent":["import  { useReducer, useEffect } from \"react\"\n\n\n\n\nconst reducer =(state, action )=>{\n    switch(action.type){\n        case 'LOAD_DATA':\n            return{\n                apps: {\n                    ...state.apps,\n                    results: action.results\n                },\n                isLoading: false\n\n            }\n        case \"FAILED\":\n        default:\n            return state;\n    }\n\n}\n\n\n\nconst useReducerFetch=(category:string, amount:number)=>{\n\n    const [{apps, isLoading}, dispatch] = useReducer(reducer, {apps:{}, isLoading:true} )\n    \n    const fetchApps= async(category:string, amount: number) =>{\n        const url = `https://rss.itunes.apple.com/api/v1/hk/ios-apps/${category}/all/${amount}/explicit.json`;\n        const res = await fetch(`https://cors-anywhere.herokuapp.com/${url}`);\n        const data = await res.json()\n        const results = data.feed.results \n        if(results){\n            dispatch({type:\"LOAD_DATA\", results })\n        }else{\n            dispatch({type:\"FAILED\"})\n        }\n\n    }\n\n    useEffect(()=>{\n        if (amount < 101){\n            fetchApps(category, amount)\n        }\n\n        return ;\n    }, [category, amount ])\n    \n    return({apps, isLoading})\n}\n\nexport default useReducerFetch","import * as React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport useReducerFetch from \"../Hooks/useReducerFetch\";\n\nconst Horizontal = styled.div`\n  position: sticky;\n  top:0%;\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  overflow-x: scroll;\n  background-color: white;\n`;\n\nconst FreeAppImg = styled.img`\n  width: 5vw;\n  border-radius: 5%;\n`;\n\nconst FreeApp = styled.div`\n  padding: 1vw;\n  max-height: 12vw;\n`;\n\nconst FreeAppName = styled.div`\n  color: rgb(62, 62, 62);\n  font-size: 0.8vw;\n  transition: font-weight 0.5s;\n  ${FreeApp}:hover & {\n    font-weight: 600;\n    box-shadow: 1vw 1vw 5% grey;\n  }\n`;\n\nconst FreeAppGenres = styled.div`\n  color: lightgrey;\n  font-size: 0.5vw;\n  font-weight: 600;\n  transition: font-weight 0.5s;\n  transition: color 0.5s;\n  ${FreeApp}:hover & {\n    font-weight: 1000;\n    box-shadow: 1vw 1vw 5% grey;\n    color: grey;\n  }\n`;\n\nconst TopFree: React.FC = () => {\n  const [amount, setAmount] = useState(10);\n  const { apps, isLoading } = useReducerFetch(\"top-free\", amount);\n\n  useEffect(() => {\n    const fetchMore = entries => {\n      entries.forEach(entry => {\n        if (entry.intersectionRatio > 0) {\n          setAmount(currentAmount => currentAmount + 10);\n        }\n      });\n    };\n    const observer = new IntersectionObserver(fetchMore);\n\n    const target = document.querySelector(\"#preload\");\n    observer.observe(target);\n\n    return () => observer.unobserve(target);\n  }, []);\n\n  return (\n    <>\n      <Horizontal className=\"top-free\">\n        {isLoading\n          ? \"...loading\"\n          : apps.results.map((app, i) => {\n              return (\n                <FreeApp key={i}>\n                  <FreeAppName>{app.name}</FreeAppName>\n                  <FreeAppGenres>{app.genres[0].name}</FreeAppGenres>\n                  <FreeAppImg\n                    src={app.artworkUrl100}\n                    alt={app.name + \" image\"}\n                  />\n                </FreeApp>\n              );\n            })}\n\n        <div id=\"preload\" style={{ padding: \"1em\" }}></div>\n      </Horizontal>\n    </>\n  );\n};\n\nexport default TopFree;\n","import useReducerFetch from \"../Hooks/useReducerFetch\";\nimport styled from \"styled-components\";\nimport React, { useState, useEffect } from \"react\";\n\nconst Vertical = styled.div`\n  overflow: auto;\n  text-align:center;\n  height: 60vw;\n  padding-bottom: 0;\n  `;\n\nconst GrossingApp = styled.div`\n  display: flex;\n  justify-content: start;\n  padding: 1vw;\n  margin: 1vw;\n  border-bottom: 1px solid darkgrey;\n  border-radius: 1vw;\n  margin: 0vw 20vw 0vw 20vw;\n\n`;\nconst GrossingAppImg = styled.img`\n  justify-content: flex-start;\n  width: 4vw;\n  height:4vw;\n  border-radius: 5%;\n  margin-right: 0.5vw;\n`;\n\nconst GrossingAppName = styled.div`\n  color: rgb(62, 62, 62);\n  font-size: 0.8vw;\n  transition: font-weight 0.5s;\n  ${GrossingApp}:hover & {\n    font-weight: 600;\n    box-shadow: 1vw 1vw 5% grey;\n  }\n`;\n\nconst GrossingAppGenres = styled.div`\n  color: lightgrey;\n  font-size: 0.5vw;\n  font-weight: 600;\n  transition: font-weight 0.5s;\n  transition: color 0.5s;\n  ${GrossingApp}:hover & {\n    font-weight: 1000;\n    box-shadow: 1vw 1vw 5% grey;\n    color: grey;\n  }\n`;\n\nconst TopGrossing = () => {\n  const [amount, setAmount] = useState(10);\n  const { apps, isLoading } = useReducerFetch(\"top-grossing\", amount);\n\n  useEffect(() => {\n    const fetchGrossing = entries => {\n      entries.forEach(entry => {\n        if (entry.intersectionRatio > 0) {\n          setAmount(currentAmount => currentAmount + 10);\n        }\n      });\n    };\n\n    const observer = new IntersectionObserver(fetchGrossing);\n    const target = document.querySelector(\"#grossing-preload\");\n    observer.observe(target);\n\n    return () => {\n      observer.unobserve(target);\n    };\n  }, []);\n\n  return (\n    <Vertical>\n      {isLoading\n        ? \"...loading\"\n        : apps.results.map((app, i) => {\n            return (\n              <GrossingApp key={i}>\n                <GrossingAppImg\n                  src={app.artworkUrl100}\n                  alt={app.name + \" image\"}\n                />\n                  <GrossingAppName>{app.name}</GrossingAppName>\n                  <></>\n                  <GrossingAppGenres>{app.genres[0].name}</GrossingAppGenres>\n              </GrossingApp>\n            );\n          })}\n\n      <div id=\"grossing-preload\" style={{ padding: \"5vw\" }}></div>\n    </Vertical>\n  );\n};\n\nexport default TopGrossing;\n","import React from \"react\";\nimport \"./App.css\";\nimport TopFree from \"./components/TopFree\";\nimport TopGrossing from \"./components/TopGrossing\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <span>\n        <TopFree />\n      </span>\n      <span>\n        <TopGrossing />\n    </span>\n  </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}